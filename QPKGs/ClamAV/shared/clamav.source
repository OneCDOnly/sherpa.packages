#!/usr/bin/env bash
#* <?dont_edit?>
#
#* <?filename?>
#
#* <?copyright?>
#
#* <?project?>
#
#* <?tested?>
#
#* <?license?>

readonly r_user_args_raw=$*
readonly r_qpkg_name=ClamAV
readonly r_service_script_version='<?build_date?>'

InitService()
	{

	# This is a type 4 service-script.

	# NOTE: default session values are set in service function library: uncomment to update, or copy to change.

	# >>> Paths <<<

		# pip_cache_path=undefined

		# qpkg_repo_path=undefined

		# qpkg_wheels_path=undefined

		# venv_path=undefined

	# >>> Filenames <<<

		# qpkg_ini_file=config.ini
		qpkg_ini_file=undefined

	# >>> Pathfilenames <<<

		# app_version_pathfile=undefined

		# daemon_check_pathfile=undefined							# If set, look for this process pathfilename instead of $daemon_exec_pathfile.

		# daemon_exec_pathfile=undefined							# The pathfilename of the main daemon. If $daemon_script_pathfile is set, then this will be the interpreter to launch.

		# daemon_pid_pathfile=/var/run/$r_qpkg_name.pid

		# daemon_script_pathfile=undefined							# When an interpreter is to be used, interpret this script.

		# launcher_pathfile=undefined								# On-demand executables only.

		# qpkg_backup_pathfile=$r_backup_path/$r_qpkg_name.config.tar.gz
		qpkg_backup_pathfile=undefined

		# qpkg_ini_pathfile=$r_qpkg_config_path/$qpkg_ini_file
		qpkg_ini_pathfile=undefined

		# qpkg_ini_default_pathfile=$qpkg_ini_pathfile.def
		qpkg_ini_default_pathfile=undefined

		# userlink_pathfile=undefined								# On-demand executables only.

		# venv_pip_pathfile=undefined

		# venv_python_pathfile=undefined

	# >>> Switches <<<

		# allow_access_to_sys_packages=true

		# can_restart_to_update=false								# If 'true', application can be updated by restarting service-script.

		# daemon_pidfile_is_managed_by_app=false

		# install_pip_deps=false
		install_pip_deps=true

		# recheck_daemon_pid_after_kill=false						# If 'true', application PID is reconfirmed shortly after kill confirmed. Some applications kill their main PID, then switch to another during shutdown.

		# recheck_daemon_pid_after_launch=false						# If 'true', application PID is reconfirmed shortly after initial launch. Some applications launch with one PID, then switch to another.

		# resolve_remote_url=false									# If 'true', URL must be retrieved from remote first, then parsed to get final URL.

		# run_daemon_in_screen_session=false						# If 'true', daemon is always launched in a `screen` session, but will exit `screen` when it can.

		# silence_pypi_errors=true									# If 'true', PyPI package processing errors won't be shown in system log.

	# >>> Values <<<

		# daemon_port=0

		# interpreter=undefined

		# nice_daemon_to=0											# If non-zero, daemon proc is niced to this value on-launch.

		# orig_daemon_service_script=undefined						# Specific to Entware binaries only.

		# remote_arch=undefined

		# source_arch=undefined

		# source_git_branch=undefined

		# source_git_branch_depth=undefined							# 'shallow' (depth 1) or 'single-branch' ... 'shallow' implies 'single-branch'.

		# ui_listening_address=undefined

		# ui_port=0

		# ui_port_secure=0

	# >>> URLs <<<

		# remote_url=undefined

		# source_git_url=undefined

	# >>> CMDs <<<

		# get_app_version_cmd=undefined

		# get_daemon_port_cmd=undefined

		# get_ui_listening_address_cmd=undefined

		# get_ui_port_cmd=undefined

		# get_ui_port_secure_cmd=undefined

		# get_ui_port_secure_enabled_test_cmd=undefined

		# daemon_launch_cmd=undefined

	readonly r_target_service_pathfile=/etc/init.d/antivirus.sh
	readonly r_backup_service_pathfile=$r_target_service_pathfile.bak

	}

StartQPKGCustom()
	{

	IsError && return
	MakePaths
	WaitForGit || { SetError; return 1 ;}

	if [[ ! -e $r_backup_service_pathfile ]]; then
		cp "$r_target_service_pathfile" "$r_backup_service_pathfile"

		# mod base references
		/bin/sed -i 's|/usr/local/bin/clamscan|/opt/sbin/clamscan|' "$r_target_service_pathfile"
		/bin/sed -i 's|/usr/local/bin/freshclam|/opt/sbin/freshclam|' "$r_target_service_pathfile"

		# disable dryrun. The new ClamAV engine (0.102.4) doesn't support the '--dryrun' or '--countfile=' options.
		# match second occurrence only. First one is used by McAfee. Solution here: https://unix.stackexchange.com/a/403272
		/bin/sed -i ':a;N;$!ba; s|/bin/sh -c "$AV_SCAN_PATH $DRY_RUN_OPTIONS --dryrun|#/bin/sh -c "$AV_SCAN_PATH $DRY_RUN_OPTIONS --dryrun|2' "$r_target_service_pathfile"

		# mod 'clamscan' runtime options
		# match second occurrence only. First one is used by McAfee.
		/bin/sed -i ':a;N;$!ba; s|OPTIONS="$OPTIONS --countfile=/tmp/antivirous.job.$job_id.scanning"|OPTIONS="$OPTIONS --database=$ANTIVIRUS_CLAMAV"|2' "$r_target_service_pathfile"

		# mod 'freshclam' runtime options
		/bin/sed -i 's|$FRESHCLAM -u admin -l /tmp/.freshclam.log|$FRESHCLAM -u admin --config-file=$FRESHCLAM_CONFIG --datadir=$ANTIVIRUS_CLAMAV -l /tmp/.freshclam.log|' "$r_target_service_pathfile"

		eval "$r_target_service_pathfile" restart &>/dev/null
	fi

	/bin/grep -q freshclam /etc/profile || echo "alias freshclam='/opt/sbin/freshclam -u admin --config-file=/etc/config/freshclam.conf --datadir=/share/$(/sbin/getcfg Public path -f /etc/config/smb.conf | cut -d '/' -f 3)/.antivirus/usr/share/clamav -l /tmp/.freshclam.log'" >> /etc/profile

	DisplayCommitToLog 'start: OK'

	return 0

	}

StopQPKGCustom()
	{

	IsError && return

	if [[ -e $r_backup_service_pathfile ]]; then
		mv "$r_backup_service_pathfile" "$r_target_service_pathfile"

		eval "$r_target_service_pathfile" restart &>/dev/null
	fi

	/bin/sed -i '/freshclam/d' /etc/profile
	DisplayCommitToLog 'stop: OK'

	return 0

	}

StatusQPKGCustom()
	{

	IsNotError || return

	if [[ -e $r_backup_service_pathfile ]]; then
		printf active

		exit 0
	fi

	printf inactive

	exit 1

	}

library_path=$(/usr/bin/readlink "$0" 2>/dev/null)
[[ -z $library_path ]] && library_path=$0
readonly r_service_library_pathfile=$(/usr/bin/dirname "$library_path")/service.lib

if [[ -e $r_service_library_pathfile ]]; then
	. $r_service_library_pathfile
else
	printf '\033[1;31m%s\033[0m: %s\n' 'derp' "QPKG service function library not found, can't continue."
	exit 1
fi

ProcessArgs
