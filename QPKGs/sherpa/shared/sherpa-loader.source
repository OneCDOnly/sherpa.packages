#!/usr/bin/env bash
#* <?dont_edit?>
#
#* <?filename?>
#
#* <?copyright?>
#
#* Description:
#*	 This is the loader script for the sherpa mini-package-manager and is part of the `sherpa` QPKG.
#
#* <?project?>
#
#* <?tested?>
#
#* <?license?>

readonly USER_ARGS_RAW=$*

Init()
	{

	export LOADER_SCRIPT_VER='<?build_date?>'
	export LOADER_SCRIPT_PPID=$PPID

	readonly QPKG_NAME=sherpa
	readonly CHARS_REGULAR_PROMPT='$ '
	readonly CHARS_SUPER_PROMPT='# '
	readonly CHARS_SUDO_PROMPT="${CHARS_REGULAR_PROMPT}sudo "

	IsQNAP || return
	IsSU || return

	local source_git_branch=stable		# default branch to follow
	local test_branch=$(/sbin/getcfg $QPKG_NAME Git_Branch -d unknown -f /etc/config/qpkg.conf)

	if [[ $test_branch = unknown ]]; then
		/sbin/setcfg $QPKG_NAME Git_Branch $source_git_branch -f /etc/config/qpkg.conf
	else
		source_git_branch=$test_branch
	fi

	local -r WORK_PATH=$(/sbin/getcfg sherpa Install_Path -f /etc/config/qpkg.conf)/cache
	[[ ! -d $WORK_PATH ]] && mkdir -p "$WORK_PATH"

	local -r MANAGER_FILE='<?management_file?>'
	local -r MANAGER_ARCHIVE_FILE=${MANAGER_FILE%.*}.tar.gz
	readonly MANAGER_ARCHIVE_URL='<?cdn_sherpa_base_url?>'/$source_git_branch/$MANAGER_ARCHIVE_FILE
	readonly MANAGER_ARCHIVE_PATHFILE=$WORK_PATH/$MANAGER_ARCHIVE_FILE
	readonly MANAGER_PATHFILE=$WORK_PATH/$MANAGER_FILE

	local -r NAS_FIRMWARE=$(/sbin/getcfg System Version -f /etc/config/uLinux.conf)
	[[ ${NAS_FIRMWARE//.} -lt 426 ]] && curl_insecure_arg=' --insecure' || curl_insecure_arg=''
	readonly GNU_FIND_CMD=/opt/bin/find
	previous_msg=''

	return 0

	}

EnsureFileIsCurrent()
	{

	# $1 = local pathfilename to examine.
	# $2 = remote archive to pull updated file from.
	# $3 = local archive pathfilename to extract archive to.

	# If file was updated only recently, don't run another update. Examine `change` time as this is updated even if file content isn't modified.

	if [[ ! -e $1 ]] || ! IsThisFileRecent "$1" 60; then
		if ! (/sbin/curl"$curl_insecure_arg" --silent --fail "$2" > "$3"); then
			ShowAsWarn 'Remote file download failed'
		else
			/bin/tar --extract --gzip --no-same-owner --file="$3" --directory="$(/usr/bin/dirname "$3")" 2>/dev/null
		fi
	fi

	}

IsThisFileRecent()
	{

	# input:
	#   $1 = pathfilename: file to examine change time of.
	#   $2 = integer (optional): threshold in minutes - default is `1440` = 1 day.

	# output:
	#   $? = true/false

	# Examine `change` time as this is updated even if file content isn't modified.

	# https://stackoverflow.com/a/55622661
	[[ -e ${1:-} && $((($(/bin/date +%s)-$(/usr/bin/stat "$1" -c %Y))/60)) -le ${2:-1440} ]]

	}

IsQNAP()
	{

	# Is this a QNAP NAS?

	if [[ ! -e /etc/init.d/functions ]]; then
		ShowAsAbort 'QNAP functions not found ... is this a QNAP NAS?'
		return 1
	fi

	return 0

	}

IsSU()
	{

	# Running as superuser?

	if [[ $EUID -ne 0 ]]; then
		if [[ -e /usr/bin/sudo ]]; then
			ShowAsError 'this utility must be run with superuser privileges. Try again as:'

			echo "${CHARS_SUDO_PROMPT}sherpa $USER_ARGS_RAW" >&2
		else
			ShowAsError "this utility must be run as the 'admin' user. Please login via SSH as 'admin' and try again"
		fi

		return 1
	fi

	return 0

	}

ShowAsWarn()
	{

	# Warning only.

	WriteToDisplay.New "$(ColourTextBrightOrange warn)" "${1:-}"

	return 0

	}

ShowAsAbort()
	{

	# Fatal abort.

	WriteToDisplay.New "$(ColourTextBrightRed bort)" "${1:-}"

	return 0

	}

ShowAsError()
	{

	# Fatal error.

	local capitalised=$(Capitalise "${1:-}")

	WriteToDisplay.New "$(ColourTextBrightRed derp)" "$capitalised"

	return 0

	}

Capitalise()
	{

	# Capitalise first character of $1.

	echo "$(Uppercase ${1:0:1})${1:1}"

	}

Uppercase()
	{

	tr 'a-z' 'A-Z' <<< "$1"

	}

WriteToDisplay.New()
	{

	# Updates the previous message.

	# input:
	#	$1 = pass/fail
	#	$2 = message

	# output:
	#	stdout = overwrites previous message with updated message.
	#	$previous_length
	#	$appended_length

	local new_message=''
	local strbuffer=''
	local new_length=0

	new_message=$(printf '%-10s: %s' "$1" "$2")

	if [[ $new_message != "$previous_msg" ]]; then
		previous_length=$((${#previous_msg}+1))
		new_length=$((${#new_message}+1))

		# Jump to start of line, print new msg.
		strbuffer=$(echo -en "\r$new_message ")

		# If new msg is shorter then add spaces to end to cover previous msg.
		if [[ $new_length -lt $previous_length ]]; then
			appended_length=$((new_length-previous_length))
			strbuffer+=$(printf "%${appended_length}s")
		fi

		echo "$strbuffer"
	fi

	return 0

	}

ColourTextBrightOrange()
	{

	printf '\033[1;38;5;214m%s\033[0m' "${1:-}"

	}

ColourTextBrightRed()
	{

	printf '\033[1;31m%s\033[0m' "${1:-}"

	}

Init || exit
EnsureFileIsCurrent "$MANAGER_PATHFILE" "$MANAGER_ARCHIVE_URL" "$MANAGER_ARCHIVE_PATHFILE"
eval '/usr/bin/env bash' "$MANAGER_PATHFILE" "$USER_ARGS_RAW"
