#!/usr/bin/env bash
#* <?dont_edit?>
#
#* <?filename?>
#
#* <?copyright?>
#
#* Description:
#*	 This is the service-script for the sherpa mini-package-manager and is part of the `sherpa` QPKG.
#
#* <?project?>
#
#* <?tested?>
#
#* <?license?>

set -o nounset -o pipefail
shopt -s extglob
ln -fns /proc/self/fd /dev/fd		# KLUDGE: `/dev/fd` isn't always created by QTS.

readonly r_user_args_raw=$*

Init()
	{

    readonly r_qpkg_name=sherpa

	local -r r_qpkg_path=$(/sbin/getcfg $r_qpkg_name Install_Path -f /etc/config/qpkg.conf)
		readonly r_real_log_pathfile=$r_qpkg_path/logs/session.archive.log
		readonly r_real_loader_script_pathname=$r_qpkg_path/sherpa-loader.sh
	readonly r_apparent_loader_script_pathname=/usr/sbin/sherpa
	readonly r_gui_log_pathfile=/home/httpd/sherpa.debug.log
    readonly r_qpkg_version=$(/sbin/getcfg $r_qpkg_name Version -f /etc/config/qpkg.conf)
	readonly r_service_action_pathfile=/var/log/$r_qpkg_name.action
	readonly r_service_result_pathfile=/var/log/$r_qpkg_name.result

	[[ ! -d $(/usr/bin/dirname "$r_real_log_pathfile") ]] && mkdir -p "$(/usr/bin/dirname "$r_real_log_pathfile")"
	[[ ! -e $r_real_log_pathfile ]] && /bin/touch "$r_real_log_pathfile"

	}

StartQPKG()
	{

	[[ ! -L $r_apparent_loader_script_pathname ]] && /bin/ln -s "$r_real_loader_script_pathname" "$r_apparent_loader_script_pathname"
	[[ ! -L $r_gui_log_pathfile ]] && /bin/ln -s "$r_real_log_pathfile" "$r_gui_log_pathfile"
	echo 'symlinks created'

	}

StopQPKG()
	{

	[[ -L $r_apparent_loader_script_pathname ]] && rm -f "$r_apparent_loader_script_pathname"
	[[ -L $r_gui_log_pathfile ]] && rm -f "$r_gui_log_pathfile"
	echo 'symlinks removed'

	}

StatusQPKG()
	{

	if [[ -L $r_apparent_loader_script_pathname ]]; then
		echo active
		exit 0
	else
		echo inactive
		exit 1
	fi

	}

ShowTitle()
    {

    echo "$(ShowAsTitleName) $(ShowAsVersion)"

    }

ShowAsTitleName()
	{

	TextBrightWhite $r_qpkg_name

	}

ShowAsVersion()
	{

	printf '%s' "v$r_qpkg_version"

	}

ShowAsUsage()
    {

    echo -e "\nUsage: $0 {start|stop|restart|status}"

	}

SetServiceAction()
	{

	service_action=${1:-none}
	CommitServiceAction
	SetServiceResultAsInProgress

	}

SetServiceResultAsOK()
	{

	service_result=ok
	CommitServiceResult

	}

SetServiceResultAsFailed()
	{

	service_result=failed
	CommitServiceResult

	}

SetServiceResultAsInProgress()
	{

	# Selected action is in-progress and hasn't generated a result yet.

	service_result=in-progress
	CommitServiceResult

	}

CommitServiceAction()
	{

    echo "$service_action" > "$r_service_action_pathfile"

	}

CommitServiceResult()
	{

    echo "$service_result" > "$r_service_result_pathfile"

	}

TextBrightWhite()
	{

	[[ -n ${1:-} ]] || return

    printf '\033[1;97m%s\033[0m' "$1"

	}

Init

user_arg=${r_user_args_raw%% *}		# Only process first argument.

case $user_arg in
    ?(--)start)
        SetServiceAction start

        if StartQPKG; then
            SetServiceResultAsOK
        else
            SetServiceResultAsFailed
        fi
        ;;
    ?(-)s|?(--)status)
        StatusQPKG
        ;;
    ?(--)stop)
        SetServiceAction stop

        if StopQPKG; then
            SetServiceResultAsOK
        else
            SetServiceResultAsFailed
        fi
        ;;
    ?(-)r|?(--)restart)
        SetServiceAction restart

        if StopQPKG && StartQPKG; then
            SetServiceResultAsOK
        else
            SetServiceResultAsFailed
        fi
        ;;
	*)
		ShowTitle
		ShowAsUsage
esac

exit 0
